const { chromium } = require('playwright');
const fs = require('fs');

async function testUniversalInterface() {
    console.log('üß™ Test de l\'interface universelle dhƒÅtu...');
    
    const browser = await chromium.launch({ headless: false });
    const context = await browser.newContext();
    const page = await context.newPage();
    
    // Capture des logs console
    page.on('console', msg => {
        console.log(`üü¶ Console [${msg.type()}]:`, msg.text());
    });
    
    // Capture des erreurs
    page.on('pageerror', error => {
        console.error('üî¥ Erreur page:', error.message);
    });
    
    try {
        console.log('üìç Navigation vers l\'interface...');
        await page.goto('http://localhost:8097/universal-sign-dhatu-interface.html', { 
            waitUntil: 'networkidle',
            timeout: 30000 
        });
        
        console.log('üì∏ Capture d\'√©cran initiale...');
        await page.screenshot({ path: 'test-universal-interface-initial.png', fullPage: true });
        
        // V√©rifier la pr√©sence des dhƒÅtu
        console.log('üß¨ V√©rification des dhƒÅtu...');
        const dhatuCount = await page.locator('.dhatu-item').count();
        console.log(`‚úÖ DhƒÅtu d√©tect√©s: ${dhatuCount}`);
        
        // V√©rifier la pr√©sence des langues sign√©es
        console.log('üåç V√©rification des langues sign√©es...');
        const languageCount = await page.locator('.language-btn').count();
        console.log(`‚úÖ Langues sign√©es d√©tect√©es: ${languageCount}`);
        
        // V√©rifier la zone 3D
        console.log('üé® V√©rification zone 3D...');
        const canvasExists = await page.locator('canvas').count() > 0;
        console.log(`Canvas 3D pr√©sent: ${canvasExists}`);
        
        // Test interaction dhƒÅtu
        console.log('üîÑ Test interaction dhƒÅtu...');
        await page.click('[data-dhatu="MODAL"]');
        await page.waitForTimeout(1000);
        await page.screenshot({ path: 'test-dhatu-modal-click.png', fullPage: true });
        
        // Test s√©lection langue
        console.log('üó£Ô∏è Test s√©lection langue...');
        await page.click('text=ASL (USA)');
        await page.waitForTimeout(1000);
        await page.screenshot({ path: 'test-language-asl-selection.png', fullPage: true });
        
        // Test alphabet
        console.log('üî§ Test alphabet...');
        await page.click('text=A');
        await page.waitForTimeout(1000);
        await page.screenshot({ path: 'test-alphabet-letter-a.png', fullPage: true });
        
        // V√©rifier erreurs Three.js
        const errors = await page.evaluate(() => {
            return window.console._logs || [];
        });
        
        console.log('üìä R√©sum√© du test:');
        console.log(`- DhƒÅtu: ${dhatuCount}/9`);
        console.log(`- Langues: ${languageCount}`);
        console.log(`- Canvas 3D: ${canvasExists ? 'Oui' : 'Non'}`);
        
        await page.waitForTimeout(3000);
        
    } catch (error) {
        console.error('‚ùå Erreur durant le test:', error);
        await page.screenshot({ path: 'test-error-screenshot.png', fullPage: true });
    } finally {
        await browser.close();
    }
}

testUniversalInterface().catch(console.error);
