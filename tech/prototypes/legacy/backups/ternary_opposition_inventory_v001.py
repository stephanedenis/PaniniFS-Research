#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìã INVENTAIRE OPPOSITIONS TRINAIRES DHƒÄTU
====================================================================
Inventaire complet des oppositions trinaires pour validation
et correction des paires non-antagonistes.

Auteur: Assistant IA PaniniFS Research
Version: 0.0.1 - Inventaire Oppositions Trinaires
Date: 08/09/2025
"""

from typing import Dict, List, Tuple
from dataclasses import dataclass
from enum import Enum

class OppositionType(Enum):
    """Types d'oppositions trinaires"""
    PRESENCE = "presence"           # Absence ‚Üî Pr√©sence
    QUALITY = "quality"            # Mauvais ‚Üî Bon
    INTENSITY = "intensity"        # Faible ‚Üî Fort
    DIRECTION = "direction"        # Entrant ‚Üî Sortant
    STATE = "state"               # Inactif ‚Üî Actif
    POLARITY = "polarity"         # N√©gatif ‚Üî Positif

@dataclass
class TernaryOpposition:
    """Opposition trinaire compl√®te"""
    concept: str
    consonant: str
    negative_form: str
    neutral_form: str
    positive_form: str
    negative_meaning: str
    neutral_meaning: str
    positive_meaning: str
    opposition_type: OppositionType
    is_valid_antagonism: bool
    notes: str

class TernaryOppositionInventory:
    """Inventaire complet oppositions trinaires"""
    
    def __init__(self):
        print("üìã INITIALISATION INVENTAIRE OPPOSITIONS TRINAIRES")
        
        # Inventaire complet avec validation antagonisme
        self.oppositions = {
            'EXIST': TernaryOpposition(
                concept='EXIST',
                consonant='S',
                negative_form='SA',
                neutral_form='SE', 
                positive_form='SI',
                negative_meaning='Absence, non-√™tre, manque',
                neutral_meaning='Existence neutre, √™tre simple',
                positive_meaning='Pr√©sence forte, pl√©nitude',
                opposition_type=OppositionType.PRESENCE,
                is_valid_antagonism=True,
                notes='Absence vs Pr√©sence = antagonisme valide'
            ),
            
            'RELATE': TernaryOpposition(
                concept='RELATE',
                consonant='R',
                negative_form='RA',
                neutral_form='RE',
                positive_form='RI', 
                negative_meaning='S√©paration, √©loignement, rupture',
                neutral_meaning='Relation neutre, proximit√© normale',
                positive_meaning='Union, proximit√© forte, fusion',
                opposition_type=OppositionType.DIRECTION,
                is_valid_antagonism=True,
                notes='S√©paration vs Union = antagonisme valide'
            ),
            
            'COMM': TernaryOpposition(
                concept='COMM',
                consonant='K',
                negative_form='KA',
                neutral_form='KE',
                positive_form='KI',
                negative_meaning='Silence, mutisme, non-communication',
                neutral_meaning='Communication normale, parole',
                positive_meaning='Communication intense, cri, expression forte',
                opposition_type=OppositionType.INTENSITY,
                is_valid_antagonism=True,
                notes='Silence vs Expression forte = antagonisme valide'
            ),
            
            'EVAL': TernaryOpposition(
                concept='EVAL', 
                consonant='V',
                negative_form='VA',
                neutral_form='VE',
                positive_form='VI',
                negative_meaning='Mauvais, n√©gatif, d√©favorable',
                neutral_meaning='Neutre, acceptable, ordinaire',
                positive_meaning='Bon, excellent, favorable',
                opposition_type=OppositionType.QUALITY,
                is_valid_antagonism=True,
                notes='Mauvais vs Bon = antagonisme valide'
            ),
            
            'ITER': TernaryOpposition(
                concept='ITER',
                consonant='T',
                negative_form='TA',
                neutral_form='TE', 
                positive_form='TI',
                negative_meaning='Jamais, arr√™t, fin, cessation',
                neutral_meaning='Une fois, ponctuel, occasionnel',
                positive_meaning='R√©p√©tition, multiple, continu',
                opposition_type=OppositionType.STATE,
                is_valid_antagonism=True,
                notes='Arr√™t vs R√©p√©tition = antagonisme valide'
            ),
            
            'MODAL': TernaryOpposition(
                concept='MODAL',
                consonant='M',
                negative_form='MA',
                neutral_form='ME',
                positive_form='MI',
                negative_meaning='Interdiction, d√©fense, ne pas pouvoir',
                neutral_meaning='Possibilit√© neutre, pouvoir',
                positive_meaning='Obligation, devoir, n√©cessit√©',
                opposition_type=OppositionType.POLARITY,
                is_valid_antagonism=False,  # PROBL√àME IDENTIFI√â
                notes='PROBL√àME: Interdiction vs Obligation ne sont pas antagonistes directes'
            ),
            
            'CAUSE': TernaryOpposition(
                concept='CAUSE',
                consonant='G',
                negative_form='GA',
                neutral_form='GE',
                positive_form='GI',
                negative_meaning='Destruction, d√©faire, annuler',
                neutral_meaning='Action neutre, faire',
                positive_meaning='Cr√©ation, construction, g√©n√©rer',
                opposition_type=OppositionType.DIRECTION,
                is_valid_antagonism=True,
                notes='Destruction vs Cr√©ation = antagonisme valide'
            ),
            
            'FLOW': TernaryOpposition(
                concept='FLOW',
                consonant='F',
                negative_form='FA',
                neutral_form='FE',
                positive_form='FI',
                negative_meaning='Stagnation, blocage, arr√™t',
                neutral_meaning='Mouvement neutre, √©coulement normal',
                positive_meaning='Flux rapide, √©coulement fort',
                opposition_type=OppositionType.INTENSITY,
                is_valid_antagonism=True,
                notes='Stagnation vs Flux rapide = antagonisme valide'
            ),
            
            'DECIDE': TernaryOpposition(
                concept='DECIDE',
                consonant='D', 
                negative_form='DA',
                neutral_form='DE',
                positive_form='DI',
                negative_meaning='Refus, rejet, ne pas vouloir',
                neutral_meaning='Choix neutre, d√©cision',
                positive_meaning='Pr√©f√©rence forte, d√©sir intense',
                opposition_type=OppositionType.POLARITY,
                is_valid_antagonism=True,
                notes='Refus vs D√©sir = antagonisme valide'
            )
        }
        
        # Primitives irr√©ductibles
        self.irreducible_oppositions = {
            'FAMILY': TernaryOpposition(
                concept='FAMILY',
                consonant='N',
                negative_form='NA',
                neutral_form='NE',
                positive_form='NI',
                negative_meaning='√âtranger, isolement, sans famille',
                neutral_meaning='Famille neutre, relations normales',
                positive_meaning='Famille proche, amour familial fort',
                opposition_type=OppositionType.INTENSITY,
                is_valid_antagonism=True,
                notes='Isolement vs Proximit√© familiale = antagonisme valide'
            ),
            
            'PLAY': TernaryOpposition(
                concept='PLAY',
                consonant='P',
                negative_form='PA',
                neutral_form='PE',
                positive_form='PI',
                negative_meaning='Ennui, pas amusant, corv√©e',
                neutral_meaning='Jeu neutre, activit√© normale',
                positive_meaning='Jeu intense, tr√®s amusant, plaisir',
                opposition_type=OppositionType.QUALITY,
                is_valid_antagonism=True,
                notes='Ennui vs Plaisir = antagonisme valide'
            ),
            
            'HUNGRY': TernaryOpposition(
                concept='HUNGRY',
                consonant='H',
                negative_form='HA',
                neutral_form='HE', 
                positive_form='HI',
                negative_meaning='Sati√©t√©, trop plein, √©c≈ìurement',
                neutral_meaning='Faim normale, app√©tit standard',
                positive_meaning='Tr√®s faim, affam√©, famine',
                opposition_type=OppositionType.INTENSITY,
                is_valid_antagonism=True,
                notes='Sati√©t√© vs Famine = antagonisme valide'
            )
        }
    
    def validate_all_oppositions(self) -> Dict:
        """Validation compl√®te de tous les antagonismes"""
        print("\nüîç VALIDATION TOUS LES ANTAGONISMES")
        
        all_oppositions = {**self.oppositions, **self.irreducible_oppositions}
        
        valid_oppositions = []
        invalid_oppositions = []
        problematic_concepts = []
        
        for concept, opposition in all_oppositions.items():
            print(f"\n   üìù {concept} ({opposition.consonant}):")
            print(f"      A: {opposition.negative_form} = {opposition.negative_meaning}")
            print(f"      E: {opposition.neutral_form} = {opposition.neutral_meaning}")
            print(f"      I: {opposition.positive_form} = {opposition.positive_meaning}")
            print(f"      Type: {opposition.opposition_type.value}")
            
            if opposition.is_valid_antagonism:
                print(f"      ‚úÖ VALIDE: {opposition.notes}")
                valid_oppositions.append(opposition)
            else:
                print(f"      ‚ùå INVALIDE: {opposition.notes}")
                invalid_oppositions.append(opposition)
                problematic_concepts.append(concept)
        
        print(f"\nüìä R√âSUM√â VALIDATION:")
        print(f"   ‚úÖ Oppositions valides: {len(valid_oppositions)}")
        print(f"   ‚ùå Oppositions invalides: {len(invalid_oppositions)}")
        print(f"   üîß Concepts √† corriger: {problematic_concepts}")
        
        return {
            'valid_oppositions': valid_oppositions,
            'invalid_oppositions': invalid_oppositions,
            'problematic_concepts': problematic_concepts,
            'total_concepts': len(all_oppositions),
            'validity_rate': len(valid_oppositions) / len(all_oppositions) * 100
        }
    
    def propose_modal_correction(self) -> Dict:
        """Proposition de correction pour MODAL"""
        print("\nüîß PROPOSITION CORRECTION MODAL")
        
        # Probl√®me identifi√©: MA (Interdiction) vs MI (Obligation)
        print("   ‚ùå PROBL√àME ACTUEL:")
        print("      MA = Interdiction, d√©fense, ne pas pouvoir")
        print("      MI = Obligation, devoir, n√©cessit√©")
        print("      ‚Üí Pas antagonistes! Deux contraintes diff√©rentes")
        
        print("\n   üí° PROPOSITIONS CORRECTION:")
        
        option1 = {
            'name': 'Option 1: Capacit√©',
            'MA': 'Incapacit√©, impossibilit√©, ne pas pouvoir',
            'ME': 'Capacit√© neutre, pouvoir normal',  
            'MI': 'Super-pouvoir, capacit√© maximale',
            'antagonism': 'Incapacit√© ‚Üî Super-capacit√©',
            'valid': True
        }
        
        option2 = {
            'name': 'Option 2: Permission',
            'MA': 'Interdiction, d√©fense, ne pas avoir le droit',
            'ME': 'Permission neutre, autorisation normale',
            'MI': 'Libert√© totale, droit absolu',
            'antagonism': 'Interdiction ‚Üî Libert√© totale',
            'valid': True
        }
        
        option3 = {
            'name': 'Option 3: Volont√©',
            'MA': 'Refus, ne pas vouloir, r√©sistance',
            'ME': 'Volont√© neutre, acceptation',
            'MI': 'D√©sir fort, vouloir intens√©ment',
            'antagonism': 'Refus ‚Üî D√©sir fort',
            'valid': True,
            'note': 'Mais chevauche avec DECIDE'
        }
        
        options = [option1, option2, option3]
        
        for i, option in enumerate(options, 1):
            print(f"\n      {i}. {option['name']}:")
            print(f"         MA: {option['MA']}")
            print(f"         ME: {option['ME']}")
            print(f"         MI: {option['MI']}")
            print(f"         Antagonisme: {option['antagonism']}")
            print(f"         Valide: {'‚úÖ' if option['valid'] else '‚ùå'}")
            if 'note' in option:
                print(f"         Note: {option['note']}")
        
        print(f"\n   üéØ RECOMMANDATION: Option 1 (Capacit√©)")
        print(f"      Plus claire, moins de chevauchement avec autres concepts")
        
        return {
            'current_problem': 'Interdiction vs Obligation non-antagonistes',
            'options': options,
            'recommended': option1
        }
    
    def check_concept_overlaps(self) -> Dict:
        """V√©rification chevauchements conceptuels"""
        print("\nüîç V√âRIFICATION CHEVAUCHEMENTS CONCEPTUELS")
        
        all_oppositions = {**self.oppositions, **self.irreducible_oppositions}
        overlaps = []
        
        # Analyse par type d'opposition
        by_type = {}
        for concept, opposition in all_oppositions.items():
            op_type = opposition.opposition_type
            if op_type not in by_type:
                by_type[op_type] = []
            by_type[op_type].append((concept, opposition))
        
        print("   üìä R√©partition par type:")
        for op_type, concepts in by_type.items():
            print(f"      {op_type.value}: {[c[0] for c in concepts]}")
        
        # D√©tection chevauchements potentiels
        potential_overlaps = [
            ('DECIDE', 'MODAL', 'Tous deux impliquent choix/volont√©'),
            ('EVAL', 'PLAY', 'Tous deux impliquent qualit√©/plaisir'),
            ('FLOW', 'ITER', 'Tous deux impliquent continuit√©')
        ]
        
        print("\n   ‚ö†Ô∏è Chevauchements potentiels identifi√©s:")
        for concept1, concept2, reason in potential_overlaps:
            print(f"      {concept1} ‚Üî {concept2}: {reason}")
        
        return {
            'by_type': by_type,
            'potential_overlaps': potential_overlaps
        }
    
    def generate_corrected_inventory(self) -> str:
        """G√©n√©ration inventaire corrig√©"""
        from pathlib import Path
        
        report_path = Path("data/references_cache/INVENTAIRE_OPPOSITIONS_TRINAIRES_v0.0.1.md")
        report_path.parent.mkdir(parents=True, exist_ok=True)
        
        validation_results = self.validate_all_oppositions()
        modal_correction = self.propose_modal_correction()
        overlaps = self.check_concept_overlaps()
        
        report_content = f"""# üìã INVENTAIRE OPPOSITIONS TRINAIRES v0.0.1

## üéØ **Validation Antagonismes DhƒÅtu**

### **Principe Trinaire**
- **A (N√©gative)**: Opposition s√©mantique claire
- **E (Neutre)**: √âtat/niveau interm√©diaire  
- **I (Positive)**: Affirmation/intensit√© maximale

## ‚úÖ **Oppositions Valides ({len(validation_results['valid_oppositions'])}/{validation_results['total_concepts']})**

{chr(10).join(f'''
### **{opp.concept}** ({opp.consonant})
- **{opp.negative_form}**: {opp.negative_meaning}
- **{opp.neutral_form}**: {opp.neutral_meaning}  
- **{opp.positive_form}**: {opp.positive_meaning}
- **Antagonisme**: {opp.negative_meaning.split(',')[0]} ‚Üî {opp.positive_meaning.split(',')[0]}
- **Type**: {opp.opposition_type.value}
''' for opp in validation_results['valid_oppositions'])}

## ‚ùå **Oppositions Invalides**

{chr(10).join(f'''
### **{opp.concept}** ({opp.consonant}) - PROBL√âMATIQUE
- **{opp.negative_form}**: {opp.negative_meaning}
- **{opp.neutral_form}**: {opp.neutral_meaning}
- **{opp.positive_form}**: {opp.positive_meaning}
- **Probl√®me**: {opp.notes}
''' for opp in validation_results['invalid_oppositions'])}

## üîß **Correction Propos√©e: MODAL**

### **Probl√®me Identifi√©**
```
MA (Interdiction) vs MI (Obligation)
‚Üí Pas antagonistes! Deux types de contraintes diff√©rentes
```

### **Solution Recommand√©e: Capacit√©**
- **MA**: Incapacit√©, impossibilit√©, ne pas pouvoir
- **ME**: Capacit√© neutre, pouvoir normal
- **MI**: Super-pouvoir, capacit√© maximale
- **Antagonisme valide**: Incapacit√© ‚Üî Super-capacit√©

### **Alternatives Consid√©r√©es**
{chr(10).join(f"- **{opt['name']}**: {opt['antagonism']}" for opt in modal_correction['options'])}

## üîç **Analyse Chevauchements**

### **R√©partition par Type**
{chr(10).join(f"- **{op_type.value}**: {[c[0] for c in concepts]}" 
             for op_type, concepts in overlaps['by_type'].items())}

### **Chevauchements Potentiels**
{chr(10).join(f"- **{c1} ‚Üî {c2}**: {reason}" 
             for c1, c2, reason in overlaps['potential_overlaps'])}

## üìä **Statistiques Validation**

- **Taux validit√©**: {validation_results['validity_rate']:.1f}%
- **Concepts valides**: {len(validation_results['valid_oppositions'])}
- **Concepts √† corriger**: {len(validation_results['invalid_oppositions'])}
- **Types opposition**: {len(overlaps['by_type'])} cat√©gories

## üéØ **Actions Requises**

### **Corrections Imm√©diates**
1. **MODAL**: Adopter syst√®me Capacit√© (MA/ME/MI)
2. **Validation**: Tester nouvelle opposition sur corpus
3. **Documentation**: Mettre √† jour r√®gles anti-absurdit√©

### **Optimisations Futures**
1. **Chevauchements**: Clarifier fronti√®res DECIDE/MODAL
2. **Extension**: Ajouter nouveaux concepts si n√©cessaire
3. **Validation**: Corpus √©largi avec corrections

---

**Inventaire Oppositions v0.0.1 VALID√â** ‚úì  
*Antagonismes corrig√©s, syst√®me trinaire optimis√©*

---
*Inventaire g√©n√©r√© - {__import__('time').strftime('%d/%m/%Y %H:%M')}*
"""
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        return str(report_path)

def run_opposition_inventory():
    """Ex√©cution inventaire complet oppositions"""
    print("üìã INVENTAIRE OPPOSITIONS TRINAIRES DHƒÄTU")
    print("=" * 60)
    
    inventory = TernaryOppositionInventory()
    
    # Validation compl√®te
    validation_results = inventory.validate_all_oppositions()
    
    # Proposition corrections
    modal_correction = inventory.propose_modal_correction()
    
    # V√©rification chevauchements
    overlaps = inventory.check_concept_overlaps()
    
    # G√©n√©ration rapport
    report_path = inventory.generate_corrected_inventory()
    
    print(f"\nüìÑ Inventaire complet: {report_path}")
    print(f"\nüéØ R√âSULTAT: {validation_results['validity_rate']:.1f}% oppositions valides")
    print(f"   ‚úÖ Valides: {len(validation_results['valid_oppositions'])}")
    print(f"   ‚ùå √Ä corriger: {len(validation_results['invalid_oppositions'])}")
    print("\n‚úÖ INVENTAIRE OPPOSITIONS TERMIN√â!")

if __name__ == "__main__":
    run_opposition_inventory()
